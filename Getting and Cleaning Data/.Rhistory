download.file(fileURL, "UCI_HAR_Dataset.zip", mode="wb")
dateDownloaded <- date()
dateDownloaded
#"Sat Apr 26 11:23:23 2014"
unzip("UCI_HAR_Dataset.zip")
library(data.table)
Data_Labels <- fread("./UCI HAR Dataset/activity_labels.txt")
Column_Names <- fread("./UCI HAR Dataset/features.txt")
View(Data_Labels)
#Examine the data files for core structures. Start with the training set
Training_Subjects <- fread("UCI HAR Dataset/train/subject_train.txt")
#According to the Readme accompanying the data should be 70% of 30 subjects in training or 21 subjects
length(unique(Training_Subjects$V1))  #21
Training_Labels <- fread("UCI HAR Dataset/train/y_train.txt")
Training_Set <- read.table("UCI HAR Dataset/train/X_train.txt", header=FALSE)
View(Column_Names)
View(Training_Set)
View(Column_Names)
Data_Labels <- read.delim("./UCI HAR Dataset/activity_labels.txt")
Column_Names <- read.delim("./UCI HAR Dataset/features.txt")
#####################################################################
#Examine the data files for core structures. Start with the training set
Training_Subjects <- read.delim("UCI HAR Dataset/train/subject_train.txt")
#According to the Readme accompanying the data should be 70% of 30 subjects in training or 21 subjects
length(unique(Training_Subjects$V1))  #21
Training_Labels <- read.delim("UCI HAR Dataset/train/y_train.txt")
Training_Set <- read.table("UCI HAR Dataset/train/X_train.txt", header=FALSE)
View(Data_Labels)
#Read in the list of Activity and Column Labels
library(data.table)
Data_Labels <- fread("./UCI HAR Dataset/activity_labels.txt")
Column_Names <- fread("./UCI HAR Dataset/features.txt")
#####################################################################
#Examine the data files for core structures. Start with the training set
Training_Subjects <- fread("UCI HAR Dataset/train/subject_train.txt")
#According to the Readme accompanying the data should be 70% of 30 subjects in training or 21 subjects
length(unique(Training_Subjects$V1))  #21
Training_Labels <- fread("UCI HAR Dataset/train/y_train.txt")
Training_Set <- read.table("UCI HAR Dataset/train/X_train.txt", header=FALSE)
View(Training_Labels)
View(Data_Labels)
?which
which(Training_Labels$V1==Data_Labels$V1)
Test_Subjects <- fread("./UCI HAR Dataset/test/subject_test.txt")
#According to the Readme accompanying the data should be 30% of 30 subjects in training or 9 subjects
length(unique(Test_Subjects$V1))  #9
Test_Labels <- fread("UCI HAR Dataset/test/y_test.txt")
Test_Set <- read.table("UCI HAR Dataset/test/X_test.txt", header=FALSE)
View(Test_Subjects)
merge(Training_Labels, Data_Labels)
View(Data_Labels)
View(Training_Labels)
merge(Training_Labels, Data_Labels, by.x="V1", by.y="V1")
?data.table
merge(Training_Labels, Data_Labels, by.x="V1", by.y="V1")
?merge.data.table
merge(Training_Labels, Data_Labels, by="V1")
TEST <- merge(Training_Labels, Data_Labels, by="V1")
View(TEST)
Data_Labels <- read.delim("./UCI HAR Dataset/activity_labels.txt", header=FALSE)
View(Data_Labels)
Data_Labels <- fread("./UCI HAR Dataset/activity_labels.txt")
View(Data_Labels)
View(Training_Subjects)
names(Training_Subjects)
names(Training_Subjects) <- "Subject_Number"
Training_Subjects <- fread("UCI HAR Dataset/train/subject_train.txt")
colnames(Training_Subjects)
colnames(Training_Subjects)[1] <- "Subject_Number"
?setnames
Data_Labels <- read.table("./UCI HAR Dataset/activity_labels.txt", header=FALSE)
Column_Names <- read.table("./UCI HAR Dataset/features.txt", header=FALSE)
View(Column_Names)
View(Data_Labels)
Training_Subjects <- read.table("UCI HAR Dataset/train/subject_train.txt", header=FALSE)
View(Training_Subjects)
length(unique(Training_Subjects$V1))  #21
#Rename the column
colnames(Training_Subjects)[1] <- "Subject_Number"
View(Training_Subjects)
Training_Subjects$Dataset <- "Training"
View(Training_Subjects)
Training_Labels <- read.table("UCI HAR Dataset/train/y_train.txt", header=FALSE)
Training_Set <- read.table("UCI HAR Dataset/train/X_train.txt", header=FALSE)
TEST <- merge(Training_Labels, Data_Labels, by.x="V1", by.y="V1")
View(TEST)
View(Data_Labels)
View(Training_Labels)
length(unique(Training_Labels$V1))  #21
?which
?apply
rm(TEST)
Rename_Training_Labels <- function(Number){
Activity_Label <- Data_Labels$V2[Data_Labels$v1==Number]
return(Activity_Label)
}
apply(Training_Set, 1, Rename_Training_Labels)
View(Training_Set)
apply(Training_Labels, 1, Rename_Training_Labels)
lapply(Training_Labels$V1, Rename_Training_Labels)
Number<-1
Activity_Label <- Data_Labels$V2[Data_Labels$v1==Number]
Activity_Label
Data_Labels$v1==Number
which(Data_Labels$v1==Number)
Data_Labels[Data_Labels$v1==Number, c("V2")]
View(Data_Labels)
Data_Labels$v1
Data_Labels$V1==Number
Data_Labels[Data_Labels$V1==Number, c("V2")]
Data_Labels$V2[Data_Labels$V1==Number]
#Read in the list of Activity and Column Labels
#library(data.table)
Data_Labels <- read.table("./UCI HAR Dataset/activity_labels.txt", header=FALSE)
Column_Names <- read.table("./UCI HAR Dataset/features.txt", header=FALSE)
#####################################################################
#Examine the data files for core structures. Start with the training set
Training_Subjects <- read.table("UCI HAR Dataset/train/subject_train.txt", header=FALSE)
#According to the Readme accompanying the data should be 70% of 30 subjects in training or 21 subjects
length(unique(Training_Subjects$V1))  #21
#Rename the column
colnames(Training_Subjects)[1] <- "Subject_Number"
Training_Subjects$Dataset <- "Training"
Training_Labels <- read.table("UCI HAR Dataset/train/y_train.txt", header=FALSE)
#Check that there are 6 Training Labels
length(unique(Training_Labels$V1))  #6
Training_Set <- read.table("UCI HAR Dataset/train/X_train.txt", header=FALSE)
Rename_Training_Labels <- function(Number){
Activity_Label <- Data_Labels$V2[Data_Labels$V1==Number]
return(Activity_Label)
}
Rename_Training_Labels <- function(Number){
Activity_Label <- Data_Labels$V2[Data_Labels$V1==Number]
return(Activity_Label)
}
lapply(Training_Labels$V1, Rename_Training_Labels)
apply(Training_Labels$V1, 1, Rename_Training_Labels)
Training_Labels$V1
sapply(Training_Labels$V1, Rename_Training_Labels)
Training_Labels$Activity <- sapply(Training_Labels$V1, Rename_Training_Labels)
View(Training_Labels)
Training_Set <- read.table("UCI HAR Dataset/train/X_train.txt", header=FALSE)
View(Column_Names)
names(Training_Set)
colnames(Training_Set) <- Column_Names$V2
View(Training_Set)
colnames(Training_Set)
View(Column_Names)
Column_Names$v2[grep("mean|std", as.character(Column_Names$V2), ignore.case=F, perl=T)]
Column_Names$V2[grep("mean|std", as.character(Column_Names$V2), ignore.case=F, perl=T)]
Column_Names$V2[grep("mean()|std()", as.character(Column_Names$V2), ignore.case=F, perl=T)]
Column_Names$V2[grep("mean()-|std()-", as.character(Column_Names$V2), ignore.case=F, perl=T)]
Column_Names$V2[grep("mean()|std()", as.character(Column_Names$V2), ignore.case=F, perl=T)]
Column_Names$V2[grep("mean\()|std\()", as.character(Column_Names$V2), ignore.case=F, perl=T)]
Column_Names$V2[grep("mean\\()|std\\()", as.character(Column_Names$V2), ignore.case=F, perl=T)]
Column_Names$V2[grep("mean()|std()", as.character(Column_Names$V2), ignore.case=F, perl=T)]
as.character(Column_Names$V2)
Column_Names$V2[grep("-mean()|std()", as.character(Column_Names$V2), ignore.case=F, perl=T)]
Column_Names$V2[grep("mean|std()", as.character(Column_Names$V2), ignore.case=F, perl=T)]
Column_Names$V2[grep("mean|std", as.character(Column_Names$V2), ignore.case=F, perl=T)]
Column_Names$V2[grep("mean", as.character(Column_Names$V2), ignore.case=F, perl=T)]
Column_Names$V2[grep("mean ", as.character(Column_Names$V2), ignore.case=F, perl=T)]
Column_Names$V2[grep("mean()", as.character(Column_Names$V2), ignore.case=F, perl=T)]
Column_Names$V2[grep("mean()-", as.character(Column_Names$V2), ignore.case=F, perl=T)]
Column_Names$V2[grep("mean()-X", as.character(Column_Names$V2), ignore.case=F, perl=T)]
Column_Names$V2[grep("mean", as.character(Column_Names$V2), ignore.case=F, perl=T)]
?grep
Column_Names$V2[grep("mean()", as.character(Column_Names$V2), ignore.case=F, perl=T, fixed=T)]
Column_Names$V2[grep("mean()", as.character(Column_Names$V2), ignore.case=F, fixed=T)]
Column_Names$V2[grep("mean()|std()", as.character(Column_Names$V2), ignore.case=F, fixed=T)]
Column_Names$V2[grep("mean", as.character(Column_Names$V2), ignore.case=F, perl=T)]
Column_Names$V2[grep("meanFreq", as.character(Column_Names$V2), ignore.case=F, perl=T)]
Test_Subjects <- fread("./UCI HAR Dataset/test/subject_test.txt")
#According to the Readme accompanying the data should be 30% of 30 subjects in training or 9 subjects
length(unique(Test_Subjects$V1))  #9
#Rename the column
colnames(Test_Subjects)[1] <- "Subject_Number"
Test_Subjects$Dataset <- "Training"
Test_Subjects <- read.table("./UCI HAR Dataset/test/subject_test.txt", header=FALSE)
#According to the Readme accompanying the data should be 30% of 30 subjects in training or 9 subjects
length(unique(Test_Subjects$V1))  #9
#Rename the column
colnames(Test_Subjects)[1] <- "Subject_Number"
Test_Subjects$Dataset <- "Training"
#Read in the test set labels
Test_Labels <- read.table("UCI HAR Dataset/test/y_test.txt", header=FALSE)
#Add a column to Training set labels using the human readable label
Test_Labels$Activity <- sapply(Test_Labels$V1, Rename_Training_Labels)
View(Test_Labels)
Test_Set <- read.table("UCI HAR Dataset/test/X_test.txt", header=FALSE)
#Rename the columns of the training set data
colnames(Test_Set) <- Column_Names$V2
View(Test_Subjects)
colnames(Test_Subjects)[1] <- "Subject_Number"
Test_Subjects$Dataset <- "Test"
View(Test_Subjects)
View(Test_Labels)
!file.exists("UCI_HAR_Dataset.zip")
if(!file.exists("UCI_HAR_Dataset.zip")){
#Identify the directory of the datafile
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileURL, "UCI_HAR_Dataset.zip", mode="wb")
dateDownloaded <- date()
dateDownloaded
#"Sat Apr 26 11:24:57 2014"
#Unzip the data
unzip("UCI_HAR_Dataset.zip")
}
#####################################################################
#Read in the list of Activity and Column Labels
#library(data.table)
Data_Labels <- read.table("./UCI HAR Dataset/activity_labels.txt", header=FALSE)
Column_Names <- read.table("./UCI HAR Dataset/features.txt", header=FALSE)
#####################################################################
#Examine the data files for core structures. Start with the training set
Training_Subjects <- read.table("UCI HAR Dataset/train/subject_train.txt", header=FALSE)
#According to the Readme accompanying the data should be 70% of 30 subjects in training or 21 subjects
length(unique(Training_Subjects$V1))  #21
#Rename the column
colnames(Training_Subjects)[1] <- "Subject_Number"
Training_Subjects$Dataset <- "Training"
#Read in the training set labels
Training_Labels <- read.table("UCI HAR Dataset/train/y_train.txt", header=FALSE)
#Check that there are 6 Training Labels
length(unique(Training_Labels$V1))  #6
#This function is meant to identify the Activity Label for each Training Set
#row based on Training Labels
Rename_Training_Labels <- function(Number){
Activity_Label <- Data_Labels$V2[Data_Labels$V1==Number]
return(Activity_Label)
}
#Add a column to Training set labels using the human readable label
Training_Labels$Activity <- sapply(Training_Labels$V1, Rename_Training_Labels)
Training_Labels$V1 <- NULL
#Read in the training set data
Training_Set <- read.table("UCI HAR Dataset/train/X_train.txt", header=FALSE)
#Rename the columns of the training set data
colnames(Training_Set) <- Column_Names$V2
#Create a polished Training Dataset
Polished_Training_Set <- cbind(Training_Subjects, Training_Labels, Training_Set)
#####################################################################
Test_Subjects <- read.table("./UCI HAR Dataset/test/subject_test.txt", header=FALSE)
#According to the Readme accompanying the data should be 30% of 30 subjects in training or 9 subjects
length(unique(Test_Subjects$V1))  #9
#Rename the column
colnames(Test_Subjects)[1] <- "Subject_Number"
Test_Subjects$Dataset <- "Test"
#Read in the test set labels
Test_Labels <- read.table("UCI HAR Dataset/test/y_test.txt", header=FALSE)
#Add a column to Training set labels using the human readable label
Test_Labels$Activity <- sapply(Test_Labels$V1, Rename_Training_Labels)
Test_Labels$V1 <- NULL
#Read in the test set data
Test_Set <- read.table("UCI HAR Dataset/test/X_test.txt", header=FALSE)
#Rename the columns of the training set data
colnames(Test_Set) <- Column_Names$V2
#Create a polished Test Dataset
Polished_Test_Set <- cbind(Test_Subjects, Test_Labels, Test_Set)
#####################################################################
View(Polished_Test_Set)
#This script is designed to screen through dataset from the Peer Assignment in the Getting
#and Cleaning Data course from Coursera. This dataset is summarized on the following URL:
#http://archive.ics.uci.edu/ml/datasets/Human+Activity+Recognition+Using+Smartphones
#This script will involve checking the overall structure of the data and preparing it
#for the run_analysis.R script.
if(!file.exists("UCI_HAR_Dataset.zip")){
#Identify the directory of the datafile
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileURL, "UCI_HAR_Dataset.zip", mode="wb")
dateDownloaded <- date()
dateDownloaded
#"Sat Apr 26 11:24:57 2014"
#Unzip the data
unzip("UCI_HAR_Dataset.zip")
}
#####################################################################
#Read in the list of Activity and Column Labels
#library(data.table)
Data_Labels <- read.table("./UCI HAR Dataset/activity_labels.txt", header=FALSE)
Column_Names <- read.table("./UCI HAR Dataset/features.txt", header=FALSE)
#####################################################################
#Examine the data files for core structures. Start with the training set
Training_Subjects <- read.table("UCI HAR Dataset/train/subject_train.txt", header=FALSE)
#According to the Readme accompanying the data should be 70% of 30 subjects in training or 21 subjects
length(unique(Training_Subjects$V1))  #21
#Rename the column
colnames(Training_Subjects)[1] <- "Subject_Number"
Training_Subjects$Dataset <- "Training"
#Read in the training set labels
Training_Labels <- read.table("UCI HAR Dataset/train/y_train.txt", header=FALSE)
#Check that there are 6 Training Labels
length(unique(Training_Labels$V1))  #6
#This function is meant to identify the Activity Label for each Training Set
#row based on Training Labels
Rename_Training_Labels <- function(Number){
Activity_Label <- Data_Labels$V2[Data_Labels$V1==Number]
return(Activity_Label)
}
#Add a column to Training set labels using the human readable label
Training_Labels$Activity <- sapply(Training_Labels$V1, Rename_Training_Labels)
Training_Labels$V1 <- NULL
#Read in the training set data
Training_Set <- read.table("UCI HAR Dataset/train/X_train.txt", header=FALSE)
#Rename the columns of the training set data
colnames(Training_Set) <- Column_Names$V2
Training_Set <- Training_Set[, grep("meanFreq", colnames(Training_Set), ignore.case=F,
perl=T, invert=T)]
Training_Set <- Training_Set[, grep("mean|std", colnames(Training_Set), ignore.case=F, perl=T)]
View(Training_Set)
#Create a polished Training Dataset
Polished_Training_Set <- cbind(Training_Subjects, Training_Labels, Training_Set)
#####################################################################
Test_Subjects <- read.table("./UCI HAR Dataset/test/subject_test.txt", header=FALSE)
#According to the Readme accompanying the data should be 30% of 30 subjects in training or 9 subjects
length(unique(Test_Subjects$V1))  #9
#Rename the column
colnames(Test_Subjects)[1] <- "Subject_Number"
Test_Subjects$Dataset <- "Test"
#Read in the test set labels
Test_Labels <- read.table("UCI HAR Dataset/test/y_test.txt", header=FALSE)
#Add a column to Training set labels using the human readable label
Test_Labels$Activity <- sapply(Test_Labels$V1, Rename_Training_Labels)
Test_Labels$V1 <- NULL
#Read in the test set data
Test_Set <- read.table("UCI HAR Dataset/test/X_test.txt", header=FALSE)
#Rename the columns of the training set data
colnames(Test_Set) <- Column_Names$V2
#Limit Test Set to columns with just mean and std. Start by removing colnames involving "meanFreq"
Test_Set <- Test_Set[, grep("meanFreq", colnames(Test_Set), ignore.case=F, perl=T, invert=T)]
Test_Set <- Test_Set[, grep("mean|std", colnames(Test_Set), ignore.case=F, perl=T)]
#Create a polished Test Dataset
Polished_Test_Set <- cbind(Test_Subjects, Test_Labels, Test_Set)
#####################################################################
Combined_Dataset <- rbind(Polished_Training_Set, Polished_Test_Set)
head(Combined_Dataset,1)
head(Combined_Dataset,3)
tapply(Combined_Dataset$Subject_Number, Combined_Dataset$Activity, mean)
tapply(Combined_Dataset$Activity, Combined_Dataset$Subject_Number, mean)
warnings()
#Combine the Training and Test sets
Combined_Dataset <- rbind(Polished_Training_Set, Polished_Test_Set)
Combined_Dataset$Subject_Number <- as.factor(Combined_Dataset$Subject_Number)
tapply( Combined_Dataset$Subject_Number, Combined_Dataset$Activity, mean)
#This script is designed to screen through dataset from the Peer Assignment in the Getting
#and Cleaning Data course from Coursera. This dataset is summarized on the following URL:
#http://archive.ics.uci.edu/ml/datasets/Human+Activity+Recognition+Using+Smartphones
#This script will involve checking the overall structure of the data and preparing it
#for the run_analysis.R script.
if(!file.exists("UCI_HAR_Dataset.zip")){
#Identify the directory of the datafile
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileURL, "UCI_HAR_Dataset.zip", mode="wb")
dateDownloaded <- date()
dateDownloaded
#"Sat Apr 26 11:24:57 2014"
#Unzip the data
unzip("UCI_HAR_Dataset.zip")
}
#####################################################################
#Read in the list of Activity and Column Labels
#library(data.table)
Data_Labels <- read.table("./UCI HAR Dataset/activity_labels.txt", header=FALSE)
Column_Names <- read.table("./UCI HAR Dataset/features.txt", header=FALSE)
#####################################################################
#Examine the data files for core structures. Start with the training set
Training_Subjects <- read.table("UCI HAR Dataset/train/subject_train.txt", header=FALSE)
#According to the Readme accompanying the data should be 70% of 30 subjects in training or 21 subjects
length(unique(Training_Subjects$V1))  #21
#Rename the column
colnames(Training_Subjects)[1] <- "Subject_Number"
#Training_Subjects$Dataset <- "Training"
#Read in the training set labels
Training_Labels <- read.table("UCI HAR Dataset/train/y_train.txt", header=FALSE)
#Check that there are 6 Training Labels
length(unique(Training_Labels$V1))  #6
#This function is meant to identify the Activity Label for each Training Set
#row based on Training Labels
Rename_Training_Labels <- function(Number){
Activity_Label <- Data_Labels$V2[Data_Labels$V1==Number]
return(Activity_Label)
}
#Add a column to Training set labels using the human readable label
Training_Labels$Activity <- sapply(Training_Labels$V1, Rename_Training_Labels)
Training_Labels$V1 <- NULL
#Read in the training set data
Training_Set <- read.table("UCI HAR Dataset/train/X_train.txt", header=FALSE)
#Rename the columns of the training set data
colnames(Training_Set) <- Column_Names$V2
#Limit Training Set to columns with just mean and std. Start by removing colnames involving "meanFreq"
Training_Set <- Training_Set[, grep("meanFreq", colnames(Training_Set), ignore.case=F,
perl=T, invert=T)]
Training_Set <- Training_Set[, grep("mean|std", colnames(Training_Set), ignore.case=F, perl=T)]
#Create a polished Training Dataset
Polished_Training_Set <- cbind(Training_Subjects, Training_Labels, Training_Set)
#####################################################################
Test_Subjects <- read.table("./UCI HAR Dataset/test/subject_test.txt", header=FALSE)
#According to the Readme accompanying the data should be 30% of 30 subjects in training or 9 subjects
length(unique(Test_Subjects$V1))  #9
#Rename the column
colnames(Test_Subjects)[1] <- "Subject_Number"
#Test_Subjects$Dataset <- "Test"
#Read in the test set labels
Test_Labels <- read.table("UCI HAR Dataset/test/y_test.txt", header=FALSE)
#Add a column to Training set labels using the human readable label
Test_Labels$Activity <- sapply(Test_Labels$V1, Rename_Training_Labels)
Test_Labels$V1 <- NULL
#Read in the test set data
Test_Set <- read.table("UCI HAR Dataset/test/X_test.txt", header=FALSE)
#Rename the columns of the training set data
colnames(Test_Set) <- Column_Names$V2
#Limit Test Set to columns with just mean and std. Start by removing colnames involving "meanFreq"
Test_Set <- Test_Set[, grep("meanFreq", colnames(Test_Set), ignore.case=F, perl=T, invert=T)]
Test_Set <- Test_Set[, grep("mean|std", colnames(Test_Set), ignore.case=F, perl=T)]
#Create a polished Test Dataset
Polished_Test_Set <- cbind(Test_Subjects, Test_Labels, Test_Set)
#####################################################################
#Combine the Training and Test sets
Combined_Dataset <- rbind(Polished_Training_Set, Polished_Test_Set)
Combined_Dataset$Subject_Number <- as.factor(Combined_Dataset$Subject_Number)
tapply( Combined_Dataset$Subject_Number, Combined_Dataset$Activity, mean)
Combined_Dataset <- rbind(Polished_Training_Set, Polished_Test_Set)
#Combined_Dataset$Subject_Number <- as.factor(Combined_Dataset$Subject_Number)
tapply(Combined_Dataset$Subject_Number, Combined_Dataset$Activity, mean)
table(Combined_Dataset$Subject_Number, Combined_Dataset$Activity)
tapply(Combined_Dataset$Activity, mean)
head(Combined_Dataset, 2)
Tidy_Dataset <- aggregate(.~Subject_Number+Activity, Combined_Dataset, mean)
View(Tidy_Dataset)
?write.table
#This script is designed to use the UCI HAR dataset from the Peer Assignment in the Getting
#and Cleaning Data course from Coursera. This dataset is summarized on the following URL:
#http://archive.ics.uci.edu/ml/datasets/Human+Activity+Recognition+Using+Smartphones
#This script will involve transforming the overall data into a tidy dataset summarized by
#subject number, activity and a select set of interesting variables.
#Check to see if the zipped Datafile exists in the current working directory.
#If it does not, then it will be downloaded and unzipped.
if(!file.exists("UCI_HAR_Dataset.zip")){
#Identify the directory of the datafile
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileURL, "UCI_HAR_Dataset.zip", mode="wb")
dateDownloaded <- date()
dateDownloaded
#"Sat Apr 26 11:24:57 2014"
#Unzip the data
unzip("UCI_HAR_Dataset.zip")
}
#####################################################################
#Read in the list of Activity and Column Labels
Data_Labels <- read.table("./UCI HAR Dataset/activity_labels.txt", header=FALSE)
Column_Names <- read.table("./UCI HAR Dataset/features.txt", header=FALSE)
#####################################################################
#Read in the training set information
Training_Subjects <- read.table("UCI HAR Dataset/train/subject_train.txt", header=FALSE)
#According to the Readme accompanying the data should be 70% of 30 subjects in training or 21 subjects
length(unique(Training_Subjects$V1))  #21
#Rename the column
colnames(Training_Subjects)[1] <- "Subject_Number"
#Read in the training set labels
Training_Labels <- read.table("UCI HAR Dataset/train/y_train.txt", header=FALSE)
#Check that there are 6 Training Labels
length(unique(Training_Labels$V1))  #6
#This function is meant to identify the Activity Label for each Training Set
#row based on Training Labels
Rename_Training_Labels <- function(Number){
Activity_Label <- Data_Labels$V2[Data_Labels$V1==Number]
return(Activity_Label)
}
#Add a column to Training set labels using the human readable label
Training_Labels$Activity <- sapply(Training_Labels$V1, Rename_Training_Labels)
Training_Labels$V1 <- NULL
#Read in the training set data
Training_Set <- read.table("UCI HAR Dataset/train/X_train.txt", header=FALSE)
#Rename the columns of the training set data
colnames(Training_Set) <- Column_Names$V2
#For the purposes of this Assignment we are only interested in the mean and standard dev (std) metrics
#Limit Training Set to columns with just mean and std. Start by removing colnames involving "meanFreq"
Training_Set <- Training_Set[, grep("meanFreq", colnames(Training_Set), ignore.case=F,
perl=T, invert=T)]
Training_Set <- Training_Set[, grep("mean|std", colnames(Training_Set), ignore.case=F, perl=T)]
#Create a polished Training Dataset
Polished_Training_Set <- cbind(Training_Subjects, Training_Labels, Training_Set)
#####################################################################
#Read in the test set information
Test_Subjects <- read.table("./UCI HAR Dataset/test/subject_test.txt", header=FALSE)
#According to the Readme accompanying the data should be 30% of 30 subjects in training or 9 subjects
length(unique(Test_Subjects$V1))  #9
#Rename the column
colnames(Test_Subjects)[1] <- "Subject_Number"
#Test_Subjects$Dataset <- "Test"
#Read in the test set labels
Test_Labels <- read.table("UCI HAR Dataset/test/y_test.txt", header=FALSE)
#Add a column to Training set labels using the human readable label
Test_Labels$Activity <- sapply(Test_Labels$V1, Rename_Training_Labels)
Test_Labels$V1 <- NULL
#Read in the test set data
Test_Set <- read.table("UCI HAR Dataset/test/X_test.txt", header=FALSE)
#Rename the columns of the training set data
colnames(Test_Set) <- Column_Names$V2
#Limit Test Set to columns with just mean and std. Start by removing colnames involving "meanFreq"
Test_Set <- Test_Set[, grep("meanFreq", colnames(Test_Set), ignore.case=F, perl=T, invert=T)]
Test_Set <- Test_Set[, grep("mean|std", colnames(Test_Set), ignore.case=F, perl=T)]
#Create a polished Test Dataset
Polished_Test_Set <- cbind(Test_Subjects, Test_Labels, Test_Set)
#####################################################################
#Combine the Training and Test sets
Combined_Dataset <- rbind(Polished_Training_Set, Polished_Test_Set)
Tidy_Dataset <- aggregate(.~Subject_Number+Activity, Combined_Dataset, mean)
#Output the Tidy Dataset
write.table(Tidy_Dataset, "Tidy_Dataset_of_UCI_HAR_Data.txt", quote=FALSE, sep="\t", row.names=FALSE)
View(Training_Labels)
names(Tidy_Dataset)
write.table(names(Tidy_Dataset), "temp.txt", row.names=FALSE, quote=FALSE)
